package kr.ac.catholiccs.rshell.client;

import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.service.IoConnector;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.transport.socket.nio.NioSocketConnector;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;


@Configuration
public class MinaClient {
	
//	@Value("${remote.ip}")
	private String SERVER_IP = "127.0.0.1";
	
//	@Value("${remote.port}")
	private int SERVER_PORT = 9118;
	
	


    private final IoConnector connector;
    private final MinaClientHandler handler;

    public MinaClient() {
        // Mina IoConnector 생성
        connector = new NioSocketConnector();

        // Mina Handler 설정
        handler = new MinaClientHandler();
        connector.setHandler(handler);
        
        // ProtocolEncoder, ProtocolDecoder 설정
        connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new FixedLengthProtocolCodecFactory(Charset.forName("UTF-8"), 6)));
        
        
    }

    public String connectSendReceiveDisconnect(String message) {
    	String res = "";
        try {
            // 서버에 연결
            ConnectFuture connectFuture = connector.connect(new InetSocketAddress(SERVER_IP, SERVER_PORT));
            connectFuture.awaitUninterruptibly();

            // 연결이 성공하면 세션을 가져와 핸들러에 등록
            MinaClientHandler clientHandler = (MinaClientHandler) connector.getHandler();
            clientHandler.setSession(connectFuture.getSession());

            // 메시지 전송
            clientHandler.sendMessage(message);

            // 메시지 수신
            clientHandler.receiveMessage();
            
            // 연결 종료
            connector.dispose();
            
            // 서버 응답 반환
            res = clientHandler.getResponse();
            
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // 연결 종료
            connector.dispose();
        }
        
        return res;
    }
}
